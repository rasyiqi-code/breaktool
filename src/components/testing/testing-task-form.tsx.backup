'use client';

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Calendar } from '@/components/ui/calendar';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';
import { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from '@/components/ui/command';
import { CalendarIcon, Plus, Check, ChevronsUpDown } from 'lucide-react';
// import { format } from 'date-fns'; // Removed to fix build issues
import { cn } from '@/lib/utils';
import Image from 'next/image';

interface TestingTaskFormProps {
  onSubmit: (data: TestingTaskFormData) => void;
  onCancel: () => void;
  tools?: Array<{
    id: string;
    name: string;
    slug: string;
    logoUrl?: string;
  }>;
  testers?: Array<{
    id: string;
    name: string;
    email: string;
  }>;
  isLoading?: boolean;
}

interface TestingTaskFormData {
  toolId: string;
  testerId: string;
  title: string;
  description: string;
  priority: 'low' | 'medium' | 'high';
  deadline: Date;
  reward: number;
}

export function TestingTaskForm({ onSubmit, onCancel, tools = [], testers = [], isLoading = false }: TestingTaskFormProps) {
  const [formData, setFormData] = useState<TestingTaskFormData>({
    toolId: '',
    testerId: '',
    title: '',
    description: '',
    priority: 'medium',
    deadline: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 days from now
    reward: 0
  });

  const [errors, setErrors] = useState<Record<keyof TestingTaskFormData, string | undefined>>({} as Record<keyof TestingTaskFormData, string | undefined>);
  const [toolOpen, setToolOpen] = useState(false);
  const [testerOpen, setTesterOpen] = useState(false);

  // Helper functions to get selected items
  const selectedTool = tools.find(tool => tool.id === formData.toolId);
  const selectedTester = testers.find(tester => tester.id === formData.testerId);

  const validateForm = (): boolean => {
    const newErrors: Record<keyof TestingTaskFormData, string | undefined> = {} as Record<keyof TestingTaskFormData, string | undefined>;

    if (!formData.toolId) newErrors.toolId = 'Tool is required';
    if (!formData.testerId) newErrors.testerId = 'Tester is required';
    if (!formData.title.trim()) newErrors.title = 'Title is required';
    if (!formData.description.trim()) newErrors.description = 'Description is required';
    if (formData.reward < 0) newErrors.reward = 'Reward must be positive';

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (validateForm()) {
      onSubmit(formData);
    }
  };

  const handleInputChange = (field: keyof TestingTaskFormData, value: string | number | Date) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: undefined }));
    }
  };

  return (
    <Card className="w-full max-w-2xl mx-auto">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Plus className="h-5 w-5" />
          Create Testing Task
        </CardTitle>
        <CardDescription>
          Assign a new testing task to a verified tester
        </CardDescription>
      </CardHeader>
      <CardContent>
        <form onSubmit={handleSubmit} className="space-y-6">
          {/* Tool Selection */}
          <div className="space-y-2">
            <Label htmlFor="tool">Tool to Test *</Label>
            <Select
              value={formData.toolId}
              onValueChange={(value) => handleInputChange('toolId', value)}
            >
              <SelectTrigger className={cn(errors.toolId && 'border-red-500')}>
                <SelectValue placeholder="Select a tool to test" />
              </SelectTrigger>
              <SelectContent>
                {tools.map((tool) => (
                  <SelectItem key={tool.id} value={tool.id}>
                    <div className="flex items-center gap-2">
                      {tool.logoUrl && (
                        <Image src={tool.logoUrl} alt={tool.name} width={16} height={16} className="w-4 h-4 rounded" />
                      )}
                      {tool.name}
                    </div>
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            {errors.toolId && <p className="text-sm text-red-500">{errors.toolId}</p>}
          </div>

          {/* Tester Selection */}
          <div className="space-y-2">
            <Label htmlFor="tester">Assign to Tester *</Label>
            <Popover open={testerOpen} onOpenChange={setTesterOpen}>
              <PopoverTrigger asChild>
                <Button
                  variant="outline"
                  role="combobox"
                  aria-expanded={testerOpen}
                  className={cn(
                    "w-full justify-between",
                    errors.testerId && 'border-red-500',
                    !selectedTester && "text-muted-foreground"
                  )}
                >
                  {selectedTester ? (
                    <div className="flex flex-col items-start">
                      <span className="font-medium">{selectedTester.name}</span>
                      <span className="text-sm text-muted-foreground">{selectedTester.email}</span>
                    </div>
                  ) : (
                    "Select a verified tester"
                  )}
                  <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
                </Button>
              </PopoverTrigger>
              <PopoverContent className="w-full p-0" align="start">
                <Command>
                  <CommandInput placeholder="Search testers..." />
                  <CommandList>
                    <CommandEmpty>No testers found.</CommandEmpty>
                    <CommandGroup>
                      {testers.map((tester) => (
                        <CommandItem
                          key={tester.id}
                          value={`${tester.name} ${tester.email}`}
                          onSelect={() => {
                            handleInputChange('testerId', tester.id);
                            setTesterOpen(false);
                          }}
                        >
                          <Check
                            className={cn(
                              "mr-2 h-4 w-4",
                              formData.testerId === tester.id ? "opacity-100" : "opacity-0"
                            )}
                          />
                          <div className="flex flex-col">
                            <span className="font-medium">{tester.name}</span>
                            <span className="text-sm text-muted-foreground">{tester.email}</span>
                          </div>
                        </CommandItem>
                      ))}
                    </CommandGroup>
                  </CommandList>
                </Command>
              </PopoverContent>
            </Popover>
            {errors.testerId && <p className="text-sm text-red-500">{errors.testerId}</p>}
          </div>

          {/* Title */}
          <div className="space-y-2">
            <Label htmlFor="title">Task Title *</Label>
            <Input
              id="title"
              value={formData.title}
              onChange={(e) => handleInputChange('title', e.target.value)}
              placeholder="e.g., Comprehensive Notion Testing"
              className={cn(errors.title && 'border-red-500')}
            />
            {errors.title && <p className="text-sm text-red-500">{errors.title}</p>}
          </div>

          {/* Description */}
          <div className="space-y-2">
            <Label htmlFor="description">Description *</Label>
            <Textarea
              id="description"
              value={formData.description}
              onChange={(e) => handleInputChange('description', e.target.value)}
              placeholder="Describe what needs to be tested..."
              rows={4}
              className={cn(errors.description && 'border-red-500')}
            />
            {errors.description && <p className="text-sm text-red-500">{errors.description}</p>}
          </div>

          {/* Priority and Deadline */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="priority">Priority</Label>
              <Select value={formData.priority} onValueChange={(value) => handleInputChange('priority', value)}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="low">Low</SelectItem>
                  <SelectItem value="medium">Medium</SelectItem>
                  <SelectItem value="high">High</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label>Deadline</Label>
              <Input
                type="date"
                value={formData.deadline ? formData.deadline.toISOString().split('T')[0] : ''}
                onChange={(e) => {
                  const date = e.target.value ? new Date(e.target.value) : new Date();
                  handleInputChange('deadline', date);
                }}
                className="w-full"
              />
            </div>
          </div>

          {/* Reward */}
          <div className="space-y-2">
            <Label htmlFor="reward">Reward ($)</Label>
            <Input
              id="reward"
              type="number"
              min="0"
              step="1"
              value={formData.reward}
              onChange={(e) => {
                const value = parseInt(e.target.value);
                handleInputChange('reward', isNaN(value) ? 0 : value);
              }}
              placeholder="0"
              className={cn(errors.reward && 'border-red-500')}
            />
            {errors.reward && <p className="text-sm text-red-500">{errors.reward}</p>}
          </div>

          {/* Actions */}
          <div className="flex gap-3 pt-4">
            <Button type="submit" disabled={isLoading} className="flex-1">
              {isLoading ? 'Creating...' : 'Create Task'}
            </Button>
            <Button type="button" variant="outline" onClick={onCancel} disabled={isLoading}>
              Cancel
            </Button>
          </div>
        </form>
      </CardContent>
    </Card>
  );
}
